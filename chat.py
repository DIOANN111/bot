import logging
import asyncio
import concurrent.futures
import html
import base64
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# üîë OpenRouter API –∫–ª—é—á
API_KEY = "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"

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=API_KEY,
)

# ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
available_models = [
      #  "qwen/qwen3-4b:free",
        "deepseek/deepseek-r1:free",
]

# üìå –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_model_choice = {}  # user_id -> model_id

# üîÑ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∫ –º–æ–¥–µ–ª–∏
def ask_ai(model, prompt):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1024
        )
        return model, response.choices[0].message.content
    except Exception as e:
        return model, f"[–û—à–∏–±–∫–∞]: {e}"

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    user_id = update.message.from_user.id
    model = user_model_choice.get(user_id, available_models[0])

    await update.message.reply_text(
        f"üïê –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –º–æ–¥–µ–ª—å:\n<code>{html.escape(model)}</code>",
        parse_mode="HTML"
    )

    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
        future = loop.run_in_executor(executor, ask_ai, model, prompt)
        model, answer = await future

    await update.message.reply_text(
        f"üß† <b>{html.escape(model)}</b> –æ—Ç–≤–µ—Ç–∏–ª–∞:\n{html.escape(answer)}",
        parse_mode='HTML'
    )

# üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    model = user_model_choice.get(user_id, available_models[0])

    if "vision" not in model:
        await update.message.reply_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, meta-llama/llama-3.2-11b-vision-instruct:free)")
        return

    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = await file.download_to_drive()

    await update.message.reply_text(
        f"üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –º–æ–¥–µ–ª—å:\n<code>{html.escape(model)}</code>",
        parse_mode="HTML"
    )

    try:
        with open(file_path, "rb") as f:
            image_bytes = f.read()
        encoded = base64.b64encode(image_bytes).decode("utf-8")
        data_url = f"data:image/jpeg;base64,{encoded}"

        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "user", "content": [
                    {"type": "text", "text": "–ß—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"},
                    {"type": "image_url", "image_url": {"url": data_url}}
                ]}
            ],
            max_tokens=1024
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(
            f"üß† <b>{html.escape(model)}</b> –æ—Ç–≤–µ—Ç–∏–ª–∞:\n{html.escape(answer)}",
            parse_mode="HTML"
        )

    except Exception as e:
        await update.message.reply_text(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]: {e}")

# üéõ –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def choose_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(model, callback_data=f"model|{model}")]
        for model in available_models
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=reply_markup)

# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def handle_model_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("model|"):
        model = data.split("|", 1)[1]
        user_id = query.from_user.id
        user_model_choice[user_id] = model
        await query.edit_message_text(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å:\n<code>{html.escape(model)}</code>",
            parse_mode="HTML"
        )

# üìå –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–æ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="open_model_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ò–ò-–º–æ–¥–µ–ª–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å.",
        reply_markup=reply_markup
    )

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìç –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"
async def open_model_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(model, callback_data=f"model|{model}")]
        for model in available_models
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=reply_markup)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TELEGRAM_TOKEN = "7700257073:AAHseprAswsOfWXRaPhxluFmKXy-VqqdwJk"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("models", choose_model))
    app.add_handler(CallbackQueryHandler(handle_model_choice, pattern=r"^model\|"))
    app.add_handler(CallbackQueryHandler(open_model_menu, pattern="open_model_menu"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
